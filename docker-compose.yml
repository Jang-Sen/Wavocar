services:
  nginx:
    container_name: nginx_js
    image: nginx:stable-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/templates:/etc/nginx/templates
      - ./.cert/cert.pem:/etc/nginx/.cert/cert.pem
      - ./.cert/key.pem:/etc/nginx/.cert/key.pem
    ports:
      - "${NGINX_HTTP_PORT}:80"
      - "${NGINX_HTTPS_PORT}:443"
    depends_on:
      - backend
      - frontend
      - minio
    networks:
      - network_js

  frontend:
    container_name: frontend_js
    build:
      context: frontend
      dockerfile: Dockerfile
    volumes:
      - ./frontend:/usr/src/frontend
    env_file:
      - .env.docker
    ports:
      - "${FRONTEND_PORT}:3000"
    depends_on:
      - backend
      - minio
    tty: true
    stdin_open: true
    networks:
      - network_js

  backend:
    container_name: backend_js
    build:
      context: backend
      dockerfile: Dockerfile
      target: development
    volumes:
      - ./backend:/usr/src/backend
    command: npm run start:dev
    env_file:
      - .env.docker
    ports:
      - "${BACKEND_PORT}:8000"
    depends_on:
      - postgres
      - redis_js
      - minio
    networks:
      - network_js

  postgres:
    container_name: postgres_js
    image: postgres:latest
    restart: always
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - network_js

  redis_js:
    container_name: redis_js
    image: redis:alpine
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - network_js

  minio:
    container_name: minio_js
    image: bitnami/minio
    env_file:
      - .env.docker
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    networks:
      - network_js

networks:
  network_js:
    driver: bridge
    #    external: true
